package Maths	
	import Vectors

	public constant real PI			=  3.141592654
	public constant real DEGTORAD  	=  0.017453293
	public constant real RADTODEG  	= 57.295779513
	
	public function polarProjectionXR ( real x,  real dist, real angle ) returns real
		return x + dist * Cos(angle)
	
	public function polarProjectionYR ( real y,  real dist, real angle ) returns real
		return y + dist * Sin(angle)
		
	public function polarProjectionZR ( real z,  real dist, real angle ) returns real
		return z + dist * Sin(angle)
		
	public function polarProjectionXD ( real x,  real dist, real angle ) returns real
		return x + dist * Cos(angle * DEGTORAD)
	
	public function polarProjectionYD ( real y,  real dist, real angle ) returns real
		return y + dist * Sin(angle * DEGTORAD)
		
	public function polarProjectionZD ( real z,  real dist, real angle ) returns real
		return z + dist * Sin(angle * DEGTORAD)
	
	public function angleBetweenCoordsD ( real x1, real y1, real x2, real y2 ) returns real
		return RADTODEG * Atan2(y2 - y1, x2 - x1)
		
	public function angleBetweenCoordsR ( real x1, real y1, real x2, real y2 ) returns real
		return Atan2(y2 - y1, x2 - x1)
		
	public function distanceBetweenCoords ( real x1, real y1, real x2, real y2 ) returns real
		return SquareRoot((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))
		
	public function getSlopeAngle( real z1, real z2, real dist ) returns real
		return Atan2(z2-z1, dist )
		
	public function polarProjection3d( vec3 pos, real distance, real angleGround, real angleAir ) returns vec3
		real x = pos.x + distance * Cos(angleGround) * Sin(angleAir)
		real y = pos.y + distance * Sin(angleGround) * Sin(angleAir)
		real z = pos.z + distance * Cos(angleAir) 
		return vec3(x,y,z)
		
	public function angleToVector( real angle ) returns vec2
		return vec2(Cos(angle), Sin(angle))
		
	public function vectorToAngle( vec2 v ) returns real
		return Atan2(v.y, v.x)
	
endpackage

