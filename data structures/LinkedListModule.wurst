package LinkedListModule

	public module LinkedListModule
		static thistype first = null
		static thistype last = null
		static int size = 0
		thistype prev
		thistype next

		construct()
			print("initlinked 1")
			size++
			print("initlinked 1.1")
			if size == 1
				print("initlinked 1.2")
				first = this
				print("initlinked 1.3")
				prev = null	
				print("initlinked 2.1")
			else
				prev = last
				last.next = this
				first.prev = this
				print("initlinked 2.2")
			next = null
			last = this
			print("initlinked 3")

		static function getFirst() returns thistype
			return first
			
		function getNext() returns thistype
			return next

		function getPrev() returns thistype
			return prev
			
		function remove()
			size--
			if this != first
				prev.next = next
			if this != last
				next.prev = prev	
			if this == last
				last = prev
			if this == first
				first = next
				
		ondestroy
			remove()

		
		// linked list iterator functions

/* this feature would need inner classes
		static function iterator() returns Iterator
			return new Iterator()
	
		public class Iterator
			private parenttype current
			
			construct()
				this.current = parent.current
					
			function hasNext() returns boolean
				return current.next != null
				
			function next() returns parenttype
				current = current.next
				return current
*/


endpackage
