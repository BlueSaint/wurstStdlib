package TimedLoop
import TimerUtils

// TimedLoop
// originally created by Vexorian
// augmented by some ideas from "Constant Timer Loop 32" by Nestharus


timer timedLoopTimer = CreateTimer()
trigger timedLoopTrig = CreateTrigger()
int conditionCount = 0

function evaluateTimedLoopTrig()
	//BJDebugMsg("timedLoop - evaluate")
	TriggerEvaluate(timedLoopTrig)
	if conditionCount == 0
		timedLoopTimer.pause()


public module TimedLoop
	static constant real PERIOD = 0.031250000
	static private thistype array instances		// The array
	static private integer instanceCount = 0	// The count
	static private triggercondition triggerCond = null // the triggerCondition for this
	static private conditionfunc cond = Condition(function onExpire)

	// TODO this should be private but does not work currently
	protected boolean stopped = false

	abstract function onTimedLoop()

	private static function onExpire() returns boolean
		int i = instanceCount - 1
		while i >= 0
			thistype t = instances[i]
			t.onTimedLoop()
			if t.stopped
				instanceCount--
				instances[i] = instances[instanceCount]
				destroy t
			i -= 1
		if instanceCount == 0
			TriggerRemoveCondition(timedLoopTrig, triggerCond)
			triggerCond = null
			conditionCount--
		return false

	function stopTimedLoop()
		stopped = true

	function startTimedLoop()
		BJDebugMsg("timedLoop - 1")
		instances[instanceCount] = this
		instanceCount++
		BJDebugMsg("timedLoop - 2")
		if instanceCount == 1
			BJDebugMsg("timedLoop - 3")
			if triggerCond == null
				BJDebugMsg("timedLoop - 4")
				triggerCond = TriggerAddCondition(timedLoopTrig, cond)
				conditionCount++
				BJDebugMsg("timedLoop - 5")
				if conditionCount == 1
					BJDebugMsg("timedLoop - 6")
					timedLoopTimer.startPeriodic(PERIOD, function evaluateTimedLoopTrig)	 
					BJDebugMsg("timedLoop - 7")
