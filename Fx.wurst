package Fx
    import Dummy
    import Effect
    // This is mostly a copy of xefx, credits for that go to Vexorian

    
    // Delay in order to show the death animation of the effect correctly when a Fx is destroyed.
    // You may need to increase this if you are using effects with longer death animations.
    constant real    MIN_RECYCLE_DELAY = 4.0

    // The delay does not need to be exact so we do cleanup in batches instead of individually.
    // This determines how often the recycler runs, should be less than MIN_RECYCLE_DELAY.
    constant real    RECYCLE_INTERVAL = 0.5
    
	
	public class Fx
		private unit dummy
		private effect fx = null
		private real zang  = 0.
        private string sfxPath
		private integer red = 255
		private integer green = 255
		private integer blue = 255
		private integer alpha = 255
		
		// needed?
		private integer abil=0
		
		construct(real x, real y, real facing)
			dummy = newDummyUnit(DUMMY_PLAYER, x,y, facing*bj_RADTODEG)
        
        construct(real x, real y, real facing, string fxpath)
			dummy = newDummyUnit(DUMMY_PLAYER, x,y, facing*bj_RADTODEG)
            setFx( fxpath )
				
		function getOwner() returns player
			return dummy.getOwner()
			
		function setOwner(player p) returns Fx
			dummy.setOwner(p, false)
			return this
			
		function setTeamcolor(playercolor c) returns Fx
			SetUnitColor(dummy, c)
			return this
		
		function setScale(real value) returns Fx
			dummy.setScale(value)
			return this

		function getGreen() returns int
			return green
		
		function getBlue() returns int
			return blue
		
		function getRed() returns int
			return red
		
		function getAlpha() returns int
			return alpha
		
		
		function recolor(int r, int g, int b, int a) returns Fx
			red = r
			green = g
			blue = b
			alpha = a
			dummy.setVertexColor(r, g, b, a)
			return this


		function flash(string fx) returns Fx
			dummy.addEffect(fx, "origin").destr()
			return this

		function getXYAngle() returns real
			return dummy.getFacing()*bj_DEGTORAD

		function setXYAngle(real value) returns Fx
			dummy.setFacing(value*bj_RADTODEG)
			return this
            
        function setXYAngleInstant(real value) returns Fx
            real x = getX()
            real y = getY()
            fx.destr()
			RemoveUnit(dummy)
            dummy = CreateUnit(DUMMY_PLAYER, DUMMY_UNIT_ID, x, y, value*bj_RADTODEG)
				.addAbility('Amrf')
				.removeAbility('Amrf')
				.addAbility('Aloc')
				.setPos(x,y)
            setFx(sfxPath)
			return this

		function getZAngle() returns real
			return zang
			
		function setZAngle(real value) returns Fx
			int i = R2I(value*bj_RADTODEG + 90.5)
			zang = value
			if i >= 180
				i = 179
			else if i < 0
				i = 0
			SetUnitAnimationByIndex(dummy, i)
			return this
		
		function getX() returns real
			return dummy.getX()
			
		function getY() returns real
			return dummy.getY()
		
		function getZ() returns real
			return dummy.getFlyHeight()
		
		function setX(real x) returns Fx
			dummy.setX(x)
			return this
			
		function setY(real y) returns Fx
			dummy.setY(y)
			return this
			
		function setPos(real x, real y) returns Fx
			dummy.setPos(x, y)
			return this
		
		function setZ(real z) returns Fx
			dummy.setFlyHeight(z, 0.)
			return this
		
		function setFx(string newpath) returns Fx
			if fx != null
				fx.destr()
			if newpath == ""
				fx = null
			else                
				fx = dummy.addEffect(newpath, "origin")
            sfxPath = newpath
			return this
				
		ondestroy
            if abil != 0
               UnitRemoveAbility(dummy,abil)
               
            if fx != null
				fx.destr()

            new Recyclebin(dummy)
            dummy=null

		
		function hiddenDestroy()
			dummy.hide()
			destroy this
			
	timer    recycler = CreateTimer()

    Recyclebin array list
    
    function recycle()
            Recyclebin rb = list[Recyclebin.readindex]
            while Recyclebin.count > 0

                releaseDummyUnit(rb.u)
                rb.u = null
                Recyclebin.count--
                destroy rb
                rb = rb.next

            list[Recyclebin.readindex] = null
            Recyclebin.writeindex=Recyclebin.readindex
            //Recyclebin.readindex++
            if Recyclebin.readindex>R2I(MIN_RECYCLE_DELAY/RECYCLE_INTERVAL+1.0) 
                Recyclebin.readindex=0

            if Recyclebin.count != 0 
                TimerStart(recycler, RECYCLE_INTERVAL, false, function recycle)
                
    class Recyclebin
        unit u

        private Recyclebin next

        private static int readindex = 0
        private static int writeindex = 0
        private static int count = 0

        construct( unit u )
            if Recyclebin.count==0 
                TimerStart(recycler, RECYCLE_INTERVAL, false, function recycle)
                
            Recyclebin.count++
            this.u = u
            SetUnitOwner(u,DUMMY_PLAYER,false)
            next=list[Recyclebin.writeindex]
            list[Recyclebin.writeindex]=this
			
endpackage
