package Terrain
	import Vectors
// ******************************************************************************
// BY: Rising_Dusk
// 
// This script can be used to detect the type of pathing at a specific point.
// It is valuable to do it this way because the IsTerrainPathable is very
// counterintuitive and returns in odd ways and aren't always as you would
// expect. This library, however, facilitates detecting those things reliably
// and easily.
// 
//*****************************************************************************
// 
//    > function IsTerrainDeepWater   (real x, real y) returns boolean
//    > function IsTerrainShallowWater(real x, real y) returns boolean
//    > function IsTerrainLand        (real x, real y) returns boolean
//    > function IsTerrainPlatform    (real x, real y) returns boolean
//    > function IsTerrainWalkable    (real x, real y) returns boolean
// 
// These functions return true if the given point is of the type specified
// in the function's name and false if it is not. For the IsTerrainWalkable
// function, the MAX_RANGE constant below is the maximum deviation range from
// the supplied coordinates that will still return true.
// 
// The IsTerrainPlatform works for any preplaced walkable destructable. It will
// return true over bridges, destructable ramps, elevators, and invisible
// platforms. Walkable destructables created at runtime do not create the same
// pathing hole as preplaced ones do, so this will return false for them. All
// other functions except IsTerrainWalkable return false for platforms, because
// the platform itself erases their pathing when the map is saved.
// 
// After calling IsTerrainWalkable(x, y), the following two global variables
// gain meaning. They return the X and Y coordinates of the nearest walkable
// point to the specified coordinates. These will only deviate from the
// IsTerrainWalkable function arguments if the function returned false.
// 
// Variables that can be used from the library:
//     [real]    TerrainPathability_X
//     [real]    TerrainPathability_Y
// 
    constant real    MAX_RANGE     = 10.
    constant integer DUMMY_ITEM_ID = 'wolg'
    constant real MAP_STANDARD_HEIGHT = 0.
	location tempLoc = Location(0.,0.)
    public rect worldRect = GetWorldBounds()
    public real     minWorldX
    public real     minWorldY
    public real     maxWorldX
    public real     maxWorldY
    item       dItem   = null
    rect       find   = null
    item array hid
    integer    hidMax = 0
    real       X      = 0.
    real       Y      = 0.

	init
	    find = Rect(0., 0., 128., 128.)
	    dItem = CreateItem(DUMMY_ITEM_ID, 0, 0)
	    SetItemVisible(dItem, false)
	    minWorldX = GetRectMinX(worldRect)
        minWorldY = GetRectMinY(worldRect)
        maxWorldX = GetRectMaxX(worldRect)
        maxWorldY = GetRectMaxY(worldRect)
        
	    
	public function getTerrainNormal( real x, real y, real sampleRadius) returns vec3
        MoveLocation(tempLoc, x-sampleRadius, y)
        var zx = GetLocationZ(tempLoc)
    	MoveLocation(tempLoc, x+sampleRadius, y)
        zx -= GetLocationZ(tempLoc)
        MoveLocation(tempLoc, x, y-sampleRadius)
        var zy = GetLocationZ(tempLoc)
        MoveLocation(tempLoc, x, y+sampleRadius)
        zy -= GetLocationZ(tempLoc)
        var sampleRadius2 = 2*sampleRadius
        return vec3( zx*sampleRadius2, zy*sampleRadius2, sampleRadius2*sampleRadius2 )
	
	public function getTerrainZ(real x, real y) returns real
		MoveLocation( tempLoc, x, y )
		return GetLocationZ( tempLoc )

	public function isTerrainDeepWater(real x, real y) returns boolean
	    return not IsTerrainPathable(x, y, PATHING_TYPE_FLOATABILITY) and IsTerrainPathable(x, y, PATHING_TYPE_WALKABILITY)
	
	public function isTerrainShallowWater(real x, real y) returns boolean
	    return not IsTerrainPathable(x, y, PATHING_TYPE_FLOATABILITY) and not IsTerrainPathable(x, y, PATHING_TYPE_WALKABILITY) and IsTerrainPathable(x, y, PATHING_TYPE_BUILDABILITY)
	
	public function isTerrainLand(real x, real y) returns boolean
	    return IsTerrainPathable(x, y, PATHING_TYPE_FLOATABILITY)
	
	public function isTerrainPlatform(real x, real y) returns boolean
	    return not IsTerrainPathable(x, y, PATHING_TYPE_FLOATABILITY) and not IsTerrainPathable(x, y, PATHING_TYPE_WALKABILITY) and not IsTerrainPathable(x, y, PATHING_TYPE_BUILDABILITY)
	
	function hideItem()
	    if IsItemVisible(GetEnumItem())
	        hid[hidMax] = GetEnumItem()
	        SetItemVisible(hid[hidMax], false)
	        hidMax++

	public function isTerrainWalkable(real x, real y) returns boolean
	    //Hide any items in the area to avoid conflicts with our item
	    MoveRectTo(find, x, y)
	    EnumItemsInRect(find ,null, function hideItem)
	    //Try to move the test item and get its coords
	    SetItemPosition(dItem, x, y) //Unhides the item
	    X = GetItemX(dItem)
	    Y = GetItemY(dItem)
	    SetItemVisible(dItem, false)//Hide it again
	    //Unhide any items hidden at the start
	    while hidMax > 0
	        hidMax--
	        SetItemVisible(hid[hidMax], true)
	        hid[hidMax] = null
	    //Return walkability
	    return (X-x)*(X-x)+(Y-y)*(Y-y) <= MAX_RANGE*MAX_RANGE and not IsTerrainPathable(x, y, PATHING_TYPE_WALKABILITY)

endpackage