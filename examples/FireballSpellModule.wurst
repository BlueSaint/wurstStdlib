package FireballSpellModule	import TimerUtils	import OnCast	import LinkedListModule	import ExtensionFunctions	import Fx	import LinkedListModule	import GroupUtils	import Vectors	public module FireballSpellModule		use OnPointCast		use TimedLoop				// speed of the missile		function getSpeed() returns real			return 800.					// model of the missile		function getMissileModel() returns string			return "Abilities\\Weapons\\FireBallMissile\\FireBallMissile.mdl"				// maximum flying distance		function maxDist() returns real			return 1000.				// radius of the explosion		function radius() returns real			return 200.					function getHeight() returns real			return 50.				static thistype tempThis				real pos_x		real pos_y		real velocity_x		real velocity_y		unit caster		int level		real targetX		real targetY		boolean finished = false		real dist = 0.		Fx fx				override function onTimedLoop()			BJDebugMsg("onTimedLoop")			moveForward()			checkForCollisions()		function moveForward()			BJDebugMsg("move")			pos_x += velocity_x * PERIOD			pos_y += velocity_y * PERIOD			dist  += getSpeed() * PERIOD			fx.setX(pos_x)			fx.setY(pos_y)			if dist > maxDist()				BJDebugMsg("dist - boom")				stopTimedLoop()					function checkForCollisions()			tempThis = this			GroupEnumUnitsInRange(Groups.ENUM_GROUP, pos_x, pos_y, radius(), Condition(function filterFunc))				private static function filterFunc() returns boolean			tempThis.onCollision(GetFilterUnit())			return false					function onCollision(unit u)			BJDebugMsg("onCollision")			if IsUnitEnemy(u, caster.getOwner())				BJDebugMsg("booom")				KillUnit(u)				stopTimedLoop()								abstract static function create() returns thistype				override static function onPointCast(unit caster, int level, vec2 target)				thistype m = create()				m.caster = caster				m.level = level				m.targetX = target.x				m.targetY = target.y				m.start()				function start()				BJDebugMsg("start")				initStartPos()				initVelocity()				initFx()				startTimedLoop()				function initStartPos()				BJDebugMsg("startpos")				pos_x = caster.getX()				pos_y = caster.getY()				function initVelocity()				BJDebugMsg("initvel")				real distance_x = targetX - pos_x				real distance_y = targetY - pos_y 				real distance = SquareRoot(distance_x*distance_x + distance_y*distance_y)				if distance > 0.					velocity_x = getSpeed() * distance_x / distance					velocity_y = getSpeed() * distance_y / distance				else					velocity_x = getSpeed()					velocity_y = 0.				function initFx()			BJDebugMsg("initeffect")			fx = new Fx(pos_x, pos_y, Atan2(velocity_y, velocity_x))				.setFx(getMissileModel())				.setZ(getHeight())				ondestroy			destroy fxendpackage