package OnUnitEnterLeave
import MapBounds
import NoWurst
import Unit
import Trigger
import Player
import TempGroups
import AbilityObjEditing
import RegisterEvents

interface UnitEventListener
	function run()

UnitEventListener array enterListener
integer enterListeners = 0

UnitEventListener array leaveListener
integer leaveListeners = 0
public function onEnter(UnitEventListener l)
	enterListener[enterListeners] = l
	enterListeners++

public function onLeave(UnitEventListener l)
	leaveListener[leaveListeners] = l
	leaveListeners++

unit tempUnit = null

public function getEnterLeaveUnit() returns unit
	return tempUnit

init
	CreateTrigger()..registerEnterRegion(boundRegion, Filter(() -> begin
		tempUnit = GetFilterUnit()..addAbility(ABILITY_ID)..makeAbilityPermanent(ABILITY_ID, true)
		for int i = 0 to enterListeners-1
			enterListener[i].run()
		tempUnit = null
	end))

	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER, () -> begin
		let leavingUnit = GetTriggerUnit()
		if leavingUnit.getAbilityLevel(ABILITY_ID) == 0
			tempUnit = leavingUnit
			for int i = 0 to leaveListeners-1
				leaveListener[i].run()
			tempUnit = null
	end)
	ABILITY_ID = '!e@$'
	for i = 0 to bj_MAX_PLAYER_SLOTS-1
		players[i].setAbilityAvailable(ABILITY_ID, false)

	GroupEnumUnitsInRect(ENUM_GROUP, boundRect, Filter(() -> begin
		tempUnit = GetFilterUnit()..addAbility(ABILITY_ID)..makeAbilityPermanent(ABILITY_ID, true)
		for int i = 0 to enterListeners-1
			enterListener[i].run()
		tempUnit = null
	end))

int ABILITY_ID = '!e@$'

@compiletime function generateAbility()
	new AbilityDefinitionDefend(ABILITY_ID)
	..setName("Leave Detect")..setEditorSuffix("(OnUnitEnterLeave)")
	..setArtCaster("")..setIconNormal("")..setRace(Race.Unknown)

